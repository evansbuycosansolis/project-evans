{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\0- UT PGP AIML\\\\project-evans\\\\frontend\\\\src\\\\components\\\\AudioHybridRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioHybridRecorder = () => {\n  _s();\n  // Toggles\n  const [useWebSpeech, setUseWebSpeech] = useState(true);\n  const [useWhisper, setUseWhisper] = useState(true);\n  const [useLlama, setUseLlama] = useState(true);\n\n  // Recording state\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  // Web Speech API browser transcript (optional)\n  const [browserTranscript, setBrowserTranscript] = useState(\"\");\n\n  // Start recording\n  const handleStartRecording = async () => {\n    setAudioBlob(null);\n    setFinalTranscript(\"\");\n    setBrowserTranscript(\"\");\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorderRef.current = mediaRecorder;\n    audioChunksRef.current = [];\n    mediaRecorder.ondataavailable = event => {\n      audioChunksRef.current.push(event.data);\n    };\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(audioChunksRef.current, {\n        type: \"audio/wav\"\n      });\n      setAudioBlob(audioBlob);\n      stream.getTracks().forEach(track => track.stop());\n    };\n    mediaRecorder.start();\n    setRecording(true);\n  };\n\n  // Stop recording\n  const handleStopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n\n  // Transcribe\n  const handleTranscribe = async () => {\n    if (!audioBlob && useWhisper) {\n      alert(\"Please record some audio first.\");\n      return;\n    }\n    const url = `http://localhost:8000/api/transcribe?use_webspeech=${useWebSpeech ? 1 : 0}&use_whisper=${useWhisper ? 1 : 0}&use_llama=${useLlama ? 1 : 0}`;\n    const formData = new FormData();\n    // Only attach audio if Whisper is enabled\n    if (audioBlob && useWhisper) {\n      formData.append(\"audio\", audioBlob, \"audio.wav\");\n    } else {\n      // Workaround: FastAPI expects this field, so send a blank if not using Whisper\n      formData.append(\"audio\", new Blob(), \"blank.wav\");\n    }\n    // Always attach browser transcript (even if blank)\n    formData.append(\"web_transcript\", browserTranscript);\n    const res = await fetch(url, {\n      method: \"POST\",\n      body: formData\n    });\n    const data = await res.json();\n    setFinalTranscript(data.final_transcript || \"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transcription Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useWebSpeech,\n        onChange: () => setUseWebSpeech(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), \"Web Speech\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        marginLeft: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useWhisper,\n        onChange: () => setUseWhisper(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), \"Whisper\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        marginLeft: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useLlama,\n        onChange: () => setUseLlama(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), \"Llama\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartRecording,\n      disabled: recording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopRecording,\n      disabled: !recording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranscribe,\n      children: \"Transcribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: finalTranscript,\n      readOnly: true,\n      style: {\n        width: \"100%\",\n        minHeight: 120\n      },\n      placeholder: \"Transcript output here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), audioBlob && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: URL.createObjectURL(audioBlob)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioHybridRecorder, \"L/E1evsd+zfeA50gm2y2ukuMZpM=\");\n_c = AudioHybridRecorder;\nexport default AudioHybridRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioHybridRecorder\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","AudioHybridRecorder","_s","useWebSpeech","setUseWebSpeech","useWhisper","setUseWhisper","useLlama","setUseLlama","recording","setRecording","audioBlob","setAudioBlob","finalTranscript","setFinalTranscript","mediaRecorderRef","audioChunksRef","browserTranscript","setBrowserTranscript","handleStartRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","push","data","onstop","Blob","type","getTracks","forEach","track","stop","start","handleStopRecording","handleTranscribe","alert","url","formData","FormData","append","res","fetch","method","body","json","final_transcript","children","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","v","style","marginLeft","onClick","disabled","value","readOnly","width","minHeight","placeholder","controls","src","URL","createObjectURL","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/0- UT PGP AIML/project-evans/frontend/src/components/AudioHybridRecorder.tsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\nconst AudioHybridRecorder = () => {\r\n  // Toggles\r\n  const [useWebSpeech, setUseWebSpeech] = useState(true);\r\n  const [useWhisper, setUseWhisper] = useState(true);\r\n  const [useLlama, setUseLlama] = useState(true);\r\n\r\n  // Recording state\r\n  const [recording, setRecording] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\r\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const audioChunksRef = useRef<Blob[]>([]);\r\n\r\n  // Web Speech API browser transcript (optional)\r\n  const [browserTranscript, setBrowserTranscript] = useState(\"\");\r\n\r\n  // Start recording\r\n  const handleStartRecording = async () => {\r\n    setAudioBlob(null);\r\n    setFinalTranscript(\"\");\r\n    setBrowserTranscript(\"\");\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    const mediaRecorder = new MediaRecorder(stream);\r\n    mediaRecorderRef.current = mediaRecorder;\r\n    audioChunksRef.current = [];\r\n\r\n    mediaRecorder.ondataavailable = (event: BlobEvent) => {\r\n      audioChunksRef.current.push(event.data);\r\n    };\r\n\r\n    mediaRecorder.onstop = () => {\r\n      const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/wav\" });\r\n      setAudioBlob(audioBlob);\r\n      stream.getTracks().forEach((track) => track.stop());\r\n    };\r\n\r\n    mediaRecorder.start();\r\n    setRecording(true);\r\n  };\r\n\r\n  // Stop recording\r\n  const handleStopRecording = () => {\r\n    if (mediaRecorderRef.current) {\r\n      mediaRecorderRef.current.stop();\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n  // Transcribe\r\n  const handleTranscribe = async () => {\r\n    if (!audioBlob && useWhisper) {\r\n      alert(\"Please record some audio first.\");\r\n      return;\r\n    }\r\n\r\n    const url = `http://localhost:8000/api/transcribe?use_webspeech=${useWebSpeech ? 1 : 0}&use_whisper=${useWhisper ? 1 : 0}&use_llama=${useLlama ? 1 : 0}`;\r\n    const formData = new FormData();\r\n    // Only attach audio if Whisper is enabled\r\n    if (audioBlob && useWhisper) {\r\n      formData.append(\"audio\", audioBlob, \"audio.wav\");\r\n    } else {\r\n      // Workaround: FastAPI expects this field, so send a blank if not using Whisper\r\n      formData.append(\"audio\", new Blob(), \"blank.wav\");\r\n    }\r\n    // Always attach browser transcript (even if blank)\r\n    formData.append(\"web_transcript\", browserTranscript);\r\n\r\n    const res = await fetch(url, { method: \"POST\", body: formData });\r\n    const data = await res.json();\r\n    setFinalTranscript(data.final_transcript || \"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Transcription Settings</h2>\r\n      <label>\r\n        <input type=\"checkbox\" checked={useWebSpeech} onChange={() => setUseWebSpeech(v => !v)} />\r\n        Web Speech\r\n      </label>\r\n      <label style={{ marginLeft: 16 }}>\r\n        <input type=\"checkbox\" checked={useWhisper} onChange={() => setUseWhisper(v => !v)} />\r\n        Whisper\r\n      </label>\r\n      <label style={{ marginLeft: 16 }}>\r\n        <input type=\"checkbox\" checked={useLlama} onChange={() => setUseLlama(v => !v)} />\r\n        Llama\r\n      </label>\r\n      <br /><br />\r\n      {/* Start/Stop Recording Buttons */}\r\n      <button onClick={handleStartRecording} disabled={recording}>\r\n        Start Recording\r\n      </button>\r\n      <button onClick={handleStopRecording} disabled={!recording}>\r\n        Stop Recording\r\n      </button>\r\n      <br /><br />\r\n      <button onClick={handleTranscribe}>Transcribe</button>\r\n      <br /><br />\r\n      <textarea\r\n        value={finalTranscript}\r\n        readOnly\r\n        style={{ width: \"100%\", minHeight: 120 }}\r\n        placeholder=\"Transcript output here\"\r\n      />\r\n      <br />\r\n      {/* Optionally play back recorded audio */}\r\n      {audioBlob && (\r\n        <audio controls src={URL.createObjectURL(audioBlob)} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioHybridRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}