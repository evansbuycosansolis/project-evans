{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\0- UT PGP AIML\\\\project-evans\\\\frontend\\\\src\\\\components\\\\AudioHybridRecorder.tsx\",\n  _s = $RefreshSig$();\n// /frontend/src/components/AudioHybridRecorder.tsx\n\nimport React, { useState } from \"react\";\n\n// This is a minimal template—adapt to your existing logic!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioHybridRecorder = () => {\n  _s();\n  const [useWebSpeech, setUseWebSpeech] = useState(true);\n  const [useWhisper, setUseWhisper] = useState(true);\n  const [useLlama, setUseLlama] = useState(true);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n\n  // These would come from your actual audio and browser speech-to-text logic:\n  const [audioBlob, setAudioBlob] = useState(null); // Audio from MediaRecorder\n  const [browserTranscript, setBrowserTranscript] = useState(\"\"); // Result from Web Speech API\n\n  // This function gets called when the user clicks \"Transcribe\"\n  const handleTranscribe = async () => {\n    if (!audioBlob) {\n      alert(\"Please record some audio first.\");\n      return;\n    }\n    const url = `http://localhost:8000/api/transcribe?use_webspeech=${useWebSpeech ? 1 : 0}&use_whisper=${useWhisper ? 1 : 0}&use_llama=${useLlama ? 1 : 0}`;\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"audio.wav\");\n    formData.append(\"web_transcript\", browserTranscript);\n    const res = await fetch(url, {\n      method: \"POST\",\n      body: formData\n    });\n    const data = await res.json();\n    setFinalTranscript(data.final_transcript || \"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transcription Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useWebSpeech,\n        onChange: () => setUseWebSpeech(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), \"Web Speech\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        marginLeft: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useWhisper,\n        onChange: () => setUseWhisper(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), \"Whisper\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        marginLeft: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: useLlama,\n        onChange: () => setUseLlama(v => !v)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), \"Llama\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranscribe,\n      children: \"Transcribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: finalTranscript,\n      readOnly: true,\n      style: {\n        width: \"100%\",\n        minHeight: 120\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioHybridRecorder, \"QGIySSf3lP7JCC3bX62ZrU86e4c=\");\n_c = AudioHybridRecorder;\nexport default AudioHybridRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioHybridRecorder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AudioHybridRecorder","_s","useWebSpeech","setUseWebSpeech","useWhisper","setUseWhisper","useLlama","setUseLlama","finalTranscript","setFinalTranscript","audioBlob","setAudioBlob","browserTranscript","setBrowserTranscript","handleTranscribe","alert","url","formData","FormData","append","res","fetch","method","body","data","json","final_transcript","style","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","v","marginLeft","onClick","value","readOnly","width","minHeight","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/0- UT PGP AIML/project-evans/frontend/src/components/AudioHybridRecorder.tsx"],"sourcesContent":["// /frontend/src/components/AudioHybridRecorder.tsx\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// This is a minimal template—adapt to your existing logic!\r\nconst AudioHybridRecorder = () => {\r\n  const [useWebSpeech, setUseWebSpeech] = useState(true);\r\n  const [useWhisper, setUseWhisper] = useState(true);\r\n  const [useLlama, setUseLlama] = useState(true);\r\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\r\n  \r\n  // These would come from your actual audio and browser speech-to-text logic:\r\n  const [audioBlob, setAudioBlob] = useState(null); // Audio from MediaRecorder\r\n  const [browserTranscript, setBrowserTranscript] = useState(\"\"); // Result from Web Speech API\r\n\r\n  // This function gets called when the user clicks \"Transcribe\"\r\n  const handleTranscribe = async () => {\r\n    if (!audioBlob) {\r\n      alert(\"Please record some audio first.\");\r\n      return;\r\n    }\r\n    const url = `http://localhost:8000/api/transcribe?use_webspeech=${useWebSpeech ? 1 : 0}&use_whisper=${useWhisper ? 1 : 0}&use_llama=${useLlama ? 1 : 0}`;\r\n    const formData = new FormData();\r\n    formData.append(\"audio\", audioBlob, \"audio.wav\");\r\n    formData.append(\"web_transcript\", browserTranscript);\r\n\r\n    const res = await fetch(url, { method: \"POST\", body: formData });\r\n    const data = await res.json();\r\n    setFinalTranscript(data.final_transcript || \"\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: 700, margin: \"auto\" }}>\r\n      <h2>Transcription Settings</h2>\r\n      <label>\r\n        <input type=\"checkbox\" checked={useWebSpeech} onChange={() => setUseWebSpeech(v => !v)} />\r\n        Web Speech\r\n      </label>\r\n      <label style={{ marginLeft: 16 }}>\r\n        <input type=\"checkbox\" checked={useWhisper} onChange={() => setUseWhisper(v => !v)} />\r\n        Whisper\r\n      </label>\r\n      <label style={{ marginLeft: 16 }}>\r\n        <input type=\"checkbox\" checked={useLlama} onChange={() => setUseLlama(v => !v)} />\r\n        Llama\r\n      </label>\r\n      <br /><br />\r\n      {/* Add your audio recorder UI here */}\r\n      {/* For example: a button to start/stop, a place to show transcript, etc. */}\r\n      <button onClick={handleTranscribe}>Transcribe</button>\r\n      <br /><br />\r\n      <textarea value={finalTranscript} readOnly style={{ width: \"100%\", minHeight: 120 }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioHybridRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}