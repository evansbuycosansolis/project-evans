{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\0- UT PGP AIML\\\\project-evans\\\\frontend\\\\src\\\\components\\\\AudioRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport RecordRTC from \"recordrtc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const recorderRef = useRef(null);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    recorderRef.current = new RecordRTC(stream, {\n      type: \"audio\"\n    });\n    recorderRef.current.startRecording();\n    setRecording(true);\n  };\n  const stopRecording = () => {\n    recorderRef.current.stopRecording(() => {\n      const blob = recorderRef.current.getBlob();\n      setAudioUrl(URL.createObjectURL(blob));\n      setRecording(false);\n    });\n  };\n  const uploadAudio = async () => {\n    if (!recorderRef.current) return;\n    const blob = recorderRef.current.getBlob();\n    const formData = new FormData();\n    formData.append(\"file\", blob, \"audio.wav\");\n    const response = await fetch(\"http://localhost:8000/consultation/whisper-transcribe\", {\n      method: \"POST\",\n      body: formData\n    });\n    const data = await response.json();\n    alert(\"Transcript: \" + data.transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83C\\uDFA4 Whisper Consultation Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), recording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"\\uD83D\\uDED1 Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"\\uD83D\\uDD34 Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !audioUrl,\n      onClick: uploadAudio,\n      children: \"Upload & Transcribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: audioUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"nyr0BPQjrErsfYQOOqX+bWYRa8c=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useRef","useState","RecordRTC","jsxDEV","_jsxDEV","AudioRecorder","_s","recording","setRecording","audioUrl","setAudioUrl","recorderRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","type","stopRecording","blob","getBlob","URL","createObjectURL","uploadAudio","formData","FormData","append","response","fetch","method","body","data","json","alert","transcript","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","controls","src","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/0- UT PGP AIML/project-evans/frontend/src/components/AudioRecorder.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport RecordRTC from \"recordrtc\";\r\n\r\nconst AudioRecorder = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [audioUrl, setAudioUrl] = useState<string | null>(null);\r\n  const recorderRef = useRef<any>(null);\r\n\r\n  const startRecording = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    recorderRef.current = new RecordRTC(stream, { type: \"audio\" });\r\n    recorderRef.current.startRecording();\r\n    setRecording(true);\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    recorderRef.current.stopRecording(() => {\r\n      const blob = recorderRef.current.getBlob();\r\n      setAudioUrl(URL.createObjectURL(blob));\r\n      setRecording(false);\r\n    });\r\n  };\r\n\r\n  const uploadAudio = async () => {\r\n    if (!recorderRef.current) return;\r\n    const blob = recorderRef.current.getBlob();\r\n    const formData = new FormData();\r\n    formData.append(\"file\", blob, \"audio.wav\");\r\n    const response = await fetch(\"http://localhost:8000/consultation/whisper-transcribe\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n    const data = await response.json();\r\n    alert(\"Transcript: \" + data.transcript);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>ðŸŽ¤ Whisper Consultation Recorder</h2>\r\n      {recording ? (\r\n        <button onClick={stopRecording}>ðŸ›‘ Stop</button>\r\n      ) : (\r\n        <button onClick={startRecording}>ðŸ”´ Start Recording</button>\r\n      )}\r\n      <button disabled={!audioUrl} onClick={uploadAudio}>Upload & Transcribe</button>\r\n      {audioUrl && (\r\n        <audio controls src={audioUrl}></audio>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}