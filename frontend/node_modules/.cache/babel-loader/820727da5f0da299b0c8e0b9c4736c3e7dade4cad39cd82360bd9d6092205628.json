{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nexport function useSpeechToText(lang = \"en-US\") {\n  _s();\n  const [transcript, setTranscript] = useState(\"\");\n  const [listening, setListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const isBrowserSupported = !!window.SpeechRecognition || !!window.webkitSpeechRecognition;\n  function startListening() {\n    if (!isBrowserSupported) return;\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.lang = lang;\n    recognition.interimResults = false;\n    recognition.onstart = () => setListening(true);\n    recognition.onend = () => setListening(false);\n    recognition.onerror = () => setListening(false);\n    recognition.onresult = event => {\n      let result = \"\";\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        result += event.results[i][0].transcript;\n      }\n      setTranscript(result.trim());\n    };\n    recognitionRef.current = recognition;\n    recognition.start();\n  }\n  function stopListening() {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n  }\n  function clearTranscript() {\n    setTranscript(\"\");\n  }\n  return {\n    transcript,\n    listening,\n    startListening,\n    stopListening,\n    isBrowserSupported,\n    clearTranscript // <-- now available!\n  };\n}\n_s(useSpeechToText, \"mZeE6MJrkcwvYWNfhlN7nAPdiWI=\");","map":{"version":3,"names":["useState","useRef","useSpeechToText","lang","_s","transcript","setTranscript","listening","setListening","recognitionRef","isBrowserSupported","window","SpeechRecognition","webkitSpeechRecognition","startListening","recognition","interimResults","onstart","onend","onerror","onresult","event","result","i","resultIndex","results","length","trim","current","start","stopListening","stop","clearTranscript"],"sources":["C:/Users/ASUS/Documents/0- UT PGP AIML/project-evans/frontend/src/hooks/useSpeechToText.tsx"],"sourcesContent":["import { useState, useRef } from \"react\";\r\n\r\nexport function useSpeechToText(lang = \"en-US\") {\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const [listening, setListening] = useState(false);\r\n  const recognitionRef = useRef<any>(null);\r\n\r\n  const isBrowserSupported =\r\n    !!(window as any).SpeechRecognition || !!(window as any).webkitSpeechRecognition;\r\n\r\n  function startListening() {\r\n    if (!isBrowserSupported) return;\r\n    const SpeechRecognition =\r\n      (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = lang;\r\n    recognition.interimResults = false;\r\n    recognition.onstart = () => setListening(true);\r\n    recognition.onend = () => setListening(false);\r\n    recognition.onerror = () => setListening(false);\r\n    recognition.onresult = (event: any) => {\r\n      let result = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        result += event.results[i][0].transcript;\r\n      }\r\n      setTranscript(result.trim());\r\n    };\r\n    recognitionRef.current = recognition;\r\n    recognition.start();\r\n  }\r\n\r\n  function stopListening() {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n    }\r\n  }\r\n\r\n  function clearTranscript() {\r\n    setTranscript(\"\");\r\n  }\r\n\r\n  return {\r\n    transcript,\r\n    listening,\r\n    startListening,\r\n    stopListening,\r\n    isBrowserSupported,\r\n    clearTranscript, // <-- now available!\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAExC,OAAO,SAASC,eAAeA,CAACC,IAAI,GAAG,OAAO,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMS,cAAc,GAAGR,MAAM,CAAM,IAAI,CAAC;EAExC,MAAMS,kBAAkB,GACtB,CAAC,CAAEC,MAAM,CAASC,iBAAiB,IAAI,CAAC,CAAED,MAAM,CAASE,uBAAuB;EAElF,SAASC,cAAcA,CAAA,EAAG;IACxB,IAAI,CAACJ,kBAAkB,EAAE;IACzB,MAAME,iBAAiB,GACpBD,MAAM,CAASC,iBAAiB,IAAKD,MAAM,CAASE,uBAAuB;IAC9E,MAAME,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;IAC3CG,WAAW,CAACZ,IAAI,GAAGA,IAAI;IACvBY,WAAW,CAACC,cAAc,GAAG,KAAK;IAClCD,WAAW,CAACE,OAAO,GAAG,MAAMT,YAAY,CAAC,IAAI,CAAC;IAC9CO,WAAW,CAACG,KAAK,GAAG,MAAMV,YAAY,CAAC,KAAK,CAAC;IAC7CO,WAAW,CAACI,OAAO,GAAG,MAAMX,YAAY,CAAC,KAAK,CAAC;IAC/CO,WAAW,CAACK,QAAQ,GAAIC,KAAU,IAAK;MACrC,IAAIC,MAAM,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,WAAW,EAAED,CAAC,GAAGF,KAAK,CAACI,OAAO,CAACC,MAAM,EAAE,EAAEH,CAAC,EAAE;QAC7DD,MAAM,IAAID,KAAK,CAACI,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAClB,UAAU;MAC1C;MACAC,aAAa,CAACgB,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC;IACDlB,cAAc,CAACmB,OAAO,GAAGb,WAAW;IACpCA,WAAW,CAACc,KAAK,CAAC,CAAC;EACrB;EAEA,SAASC,aAAaA,CAAA,EAAG;IACvB,IAAIrB,cAAc,CAACmB,OAAO,EAAE;MAC1BnB,cAAc,CAACmB,OAAO,CAACG,IAAI,CAAC,CAAC;IAC/B;EACF;EAEA,SAASC,eAAeA,CAAA,EAAG;IACzB1B,aAAa,CAAC,EAAE,CAAC;EACnB;EAEA,OAAO;IACLD,UAAU;IACVE,SAAS;IACTO,cAAc;IACdgB,aAAa;IACbpB,kBAAkB;IAClBsB,eAAe,CAAE;EACnB,CAAC;AACH;AAAC5B,EAAA,CA/CeF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}